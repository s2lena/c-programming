Grading at Wed Dec 25 06:00:13 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==858== Memcheck, a memory error detector
==858== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==858== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==858== Command: ./tester hands.txt draw.txt
==858== Parent PID: 857
==858== 
==858== Use of uninitialised value of size 8
==858==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==858==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==858==    by 0x401BC5: main (test-input.c:69)
==858== 
==858== Invalid write of size 4
==858==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==858==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==858==    by 0x401BC5: main (test-input.c:69)
==858==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==858== 
==858== 
==858== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==858==  Access not within mapped region at address 0x4
==858==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==858==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==858==    by 0x401BC5: main (test-input.c:69)
==858==  If you believe this happened as a result of a stack
==858==  overflow in your program's main thread (unlikely but
==858==  possible), you can try to increase the size of the
==858==  main thread stack using the --main-stacksize= flag.
==858==  The main thread stack size used in this run was 8388608.
==858== 
==858== HEAP SUMMARY:
==858==     in use at exit: 722 bytes in 7 blocks
==858==   total heap usage: 9 allocs, 2 frees, 4,826 bytes allocated
==858== 
==858== LEAK SUMMARY:
==858==    definitely lost: 0 bytes in 0 blocks
==858==    indirectly lost: 0 bytes in 0 blocks
==858==      possibly lost: 0 bytes in 0 blocks
==858==    still reachable: 722 bytes in 7 blocks
==858==         suppressed: 0 bytes in 0 blocks
==858== Rerun with --leak-check=full to see details of leaked memory
==858== 
==858== For counts of detected and suppressed errors, rerun with: -v
==858== Use --track-origins=yes to see where uninitialised values come from
==858== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==863== Memcheck, a memory error detector
==863== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==863== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==863== Command: ./tester hands.txt draw.txt
==863== Parent PID: 862
==863== 
==863== Use of uninitialised value of size 8
==863==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==863==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==863==    by 0x401BC5: main (test-input.c:69)
==863== 
==863== Invalid write of size 4
==863==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==863==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==863==    by 0x401BC5: main (test-input.c:69)
==863==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==863== 
==863== 
==863== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==863==  Access not within mapped region at address 0x4
==863==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==863==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==863==    by 0x401BC5: main (test-input.c:69)
==863==  If you believe this happened as a result of a stack
==863==  overflow in your program's main thread (unlikely but
==863==  possible), you can try to increase the size of the
==863==  main thread stack using the --main-stacksize= flag.
==863==  The main thread stack size used in this run was 8388608.
==863== 
==863== HEAP SUMMARY:
==863==     in use at exit: 722 bytes in 7 blocks
==863==   total heap usage: 9 allocs, 2 frees, 4,826 bytes allocated
==863== 
==863== LEAK SUMMARY:
==863==    definitely lost: 0 bytes in 0 blocks
==863==    indirectly lost: 0 bytes in 0 blocks
==863==      possibly lost: 0 bytes in 0 blocks
==863==    still reachable: 722 bytes in 7 blocks
==863==         suppressed: 0 bytes in 0 blocks
==863== Rerun with --leak-check=full to see details of leaked memory
==863== 
==863== For counts of detected and suppressed errors, rerun with: -v
==863== Use --track-origins=yes to see where uninitialised values come from
==863== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==869== Memcheck, a memory error detector
==869== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==869== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==869== Command: ./tester h.txt d.txt
==869== Parent PID: 868
==869== 
==869== Use of uninitialised value of size 8
==869==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==869==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==869==    by 0x401BC5: main (test-input.c:69)
==869== 
==869== Invalid write of size 4
==869==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==869==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==869==    by 0x401BC5: main (test-input.c:69)
==869==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==869== 
==869== 
==869== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==869==  Access not within mapped region at address 0x4
==869==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==869==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==869==    by 0x401BC5: main (test-input.c:69)
==869==  If you believe this happened as a result of a stack
==869==  overflow in your program's main thread (unlikely but
==869==  possible), you can try to increase the size of the
==869==  main thread stack using the --main-stacksize= flag.
==869==  The main thread stack size used in this run was 8388608.
==869== 
==869== HEAP SUMMARY:
==869==     in use at exit: 722 bytes in 7 blocks
==869==   total heap usage: 9 allocs, 2 frees, 4,826 bytes allocated
==869== 
==869== LEAK SUMMARY:
==869==    definitely lost: 0 bytes in 0 blocks
==869==    indirectly lost: 0 bytes in 0 blocks
==869==      possibly lost: 0 bytes in 0 blocks
==869==    still reachable: 722 bytes in 7 blocks
==869==         suppressed: 0 bytes in 0 blocks
==869== Rerun with --leak-check=full to see details of leaked memory
==869== 
==869== For counts of detected and suppressed errors, rerun with: -v
==869== Use --track-origins=yes to see where uninitialised values come from
==869== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==875== Memcheck, a memory error detector
==875== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==875== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==875== Command: ./tester i1 i2
==875== Parent PID: 874
==875== 
==875== Use of uninitialised value of size 8
==875==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==875==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==875==    by 0x401BC5: main (test-input.c:69)
==875== 
==875== Invalid write of size 4
==875==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==875==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==875==    by 0x401BC5: main (test-input.c:69)
==875==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==875== 
==875== 
==875== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==875==  Access not within mapped region at address 0x4
==875==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==875==    by 0x400D80: read_input (in /graderhome/work/c4prj2_input/tester)
==875==    by 0x401BC5: main (test-input.c:69)
==875==  If you believe this happened as a result of a stack
==875==  overflow in your program's main thread (unlikely but
==875==  possible), you can try to increase the size of the
==875==  main thread stack using the --main-stacksize= flag.
==875==  The main thread stack size used in this run was 8388608.
==875== 
==875== HEAP SUMMARY:
==875==     in use at exit: 722 bytes in 7 blocks
==875==   total heap usage: 9 allocs, 2 frees, 4,826 bytes allocated
==875== 
==875== LEAK SUMMARY:
==875==    definitely lost: 0 bytes in 0 blocks
==875==    indirectly lost: 0 bytes in 0 blocks
==875==      possibly lost: 0 bytes in 0 blocks
==875==    still reachable: 722 bytes in 7 blocks
==875==         suppressed: 0 bytes in 0 blocks
==875== Rerun with --leak-check=full to see details of leaked memory
==875== 
==875== For counts of detected and suppressed errors, rerun with: -v
==875== Use --track-origins=yes to see where uninitialised values come from
==875== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
