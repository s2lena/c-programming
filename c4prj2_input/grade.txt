Grading at Wed Dec 25 04:24:21 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==184== Memcheck, a memory error detector
==184== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==184== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==184== Command: ./tester hands.txt draw.txt
==184== Parent PID: 183
==184== 
==184== Use of uninitialised value of size 8
==184==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==184==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==184==    by 0x401B42: main (test-input.c:69)
==184== 
==184== Invalid write of size 4
==184==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==184==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==184==    by 0x401B42: main (test-input.c:69)
==184==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==184== 
==184== 
==184== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==184==  Access not within mapped region at address 0x4
==184==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==184==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==184==    by 0x401B42: main (test-input.c:69)
==184==  If you believe this happened as a result of a stack
==184==  overflow in your program's main thread (unlikely but
==184==  possible), you can try to increase the size of the
==184==  main thread stack using the --main-stacksize= flag.
==184==  The main thread stack size used in this run was 8388608.
==184== 
==184== HEAP SUMMARY:
==184==     in use at exit: 722 bytes in 7 blocks
==184==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==184== 
==184== LEAK SUMMARY:
==184==    definitely lost: 0 bytes in 0 blocks
==184==    indirectly lost: 0 bytes in 0 blocks
==184==      possibly lost: 0 bytes in 0 blocks
==184==    still reachable: 722 bytes in 7 blocks
==184==         suppressed: 0 bytes in 0 blocks
==184== Rerun with --leak-check=full to see details of leaked memory
==184== 
==184== For counts of detected and suppressed errors, rerun with: -v
==184== Use --track-origins=yes to see where uninitialised values come from
==184== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==189== Memcheck, a memory error detector
==189== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==189== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==189== Command: ./tester hands.txt draw.txt
==189== Parent PID: 188
==189== 
==189== Use of uninitialised value of size 8
==189==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==189==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==189==    by 0x401B42: main (test-input.c:69)
==189== 
==189== Invalid write of size 4
==189==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==189==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==189==    by 0x401B42: main (test-input.c:69)
==189==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==189== 
==189== 
==189== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==189==  Access not within mapped region at address 0x4
==189==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==189==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==189==    by 0x401B42: main (test-input.c:69)
==189==  If you believe this happened as a result of a stack
==189==  overflow in your program's main thread (unlikely but
==189==  possible), you can try to increase the size of the
==189==  main thread stack using the --main-stacksize= flag.
==189==  The main thread stack size used in this run was 8388608.
==189== 
==189== HEAP SUMMARY:
==189==     in use at exit: 722 bytes in 7 blocks
==189==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==189== 
==189== LEAK SUMMARY:
==189==    definitely lost: 0 bytes in 0 blocks
==189==    indirectly lost: 0 bytes in 0 blocks
==189==      possibly lost: 0 bytes in 0 blocks
==189==    still reachable: 722 bytes in 7 blocks
==189==         suppressed: 0 bytes in 0 blocks
==189== Rerun with --leak-check=full to see details of leaked memory
==189== 
==189== For counts of detected and suppressed errors, rerun with: -v
==189== Use --track-origins=yes to see where uninitialised values come from
==189== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==195== Memcheck, a memory error detector
==195== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==195== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==195== Command: ./tester h.txt d.txt
==195== Parent PID: 194
==195== 
==195== Use of uninitialised value of size 8
==195==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==195==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==195==    by 0x401B42: main (test-input.c:69)
==195== 
==195== Invalid write of size 4
==195==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==195==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==195==    by 0x401B42: main (test-input.c:69)
==195==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==195== 
==195== 
==195== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==195==  Access not within mapped region at address 0x4
==195==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==195==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==195==    by 0x401B42: main (test-input.c:69)
==195==  If you believe this happened as a result of a stack
==195==  overflow in your program's main thread (unlikely but
==195==  possible), you can try to increase the size of the
==195==  main thread stack using the --main-stacksize= flag.
==195==  The main thread stack size used in this run was 8388608.
==195== 
==195== HEAP SUMMARY:
==195==     in use at exit: 722 bytes in 7 blocks
==195==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==195== 
==195== LEAK SUMMARY:
==195==    definitely lost: 0 bytes in 0 blocks
==195==    indirectly lost: 0 bytes in 0 blocks
==195==      possibly lost: 0 bytes in 0 blocks
==195==    still reachable: 722 bytes in 7 blocks
==195==         suppressed: 0 bytes in 0 blocks
==195== Rerun with --leak-check=full to see details of leaked memory
==195== 
==195== For counts of detected and suppressed errors, rerun with: -v
==195== Use --track-origins=yes to see where uninitialised values come from
==195== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==201== Memcheck, a memory error detector
==201== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==201== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==201== Command: ./tester i1 i2
==201== Parent PID: 200
==201== 
==201== Use of uninitialised value of size 8
==201==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==201==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==201==    by 0x401B42: main (test-input.c:69)
==201== 
==201== Invalid write of size 4
==201==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==201==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==201==    by 0x401B42: main (test-input.c:69)
==201==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==201== 
==201== 
==201== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==201==  Access not within mapped region at address 0x4
==201==    at 0x400BD9: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==201==    by 0x400CFD: read_input (in /graderhome/work/c4prj2_input/tester)
==201==    by 0x401B42: main (test-input.c:69)
==201==  If you believe this happened as a result of a stack
==201==  overflow in your program's main thread (unlikely but
==201==  possible), you can try to increase the size of the
==201==  main thread stack using the --main-stacksize= flag.
==201==  The main thread stack size used in this run was 8388608.
==201== 
==201== HEAP SUMMARY:
==201==     in use at exit: 722 bytes in 7 blocks
==201==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==201== 
==201== LEAK SUMMARY:
==201==    definitely lost: 0 bytes in 0 blocks
==201==    indirectly lost: 0 bytes in 0 blocks
==201==      possibly lost: 0 bytes in 0 blocks
==201==    still reachable: 722 bytes in 7 blocks
==201==         suppressed: 0 bytes in 0 blocks
==201== Rerun with --leak-check=full to see details of leaked memory
==201== 
==201== For counts of detected and suppressed errors, rerun with: -v
==201== Use --track-origins=yes to see where uninitialised values come from
==201== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
