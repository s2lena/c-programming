Grading at Wed Dec 25 04:38:20 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==513== Memcheck, a memory error detector
==513== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==513== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==513== Command: ./tester hands.txt draw.txt
==513== Parent PID: 512
==513== 
==513== Use of uninitialised value of size 8
==513==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x401BAF: main (test-input.c:69)
==513== 
==513== Invalid write of size 4
==513==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x401BAF: main (test-input.c:69)
==513==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==513== 
==513== 
==513== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==513==  Access not within mapped region at address 0x4
==513==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x401BAF: main (test-input.c:69)
==513==  If you believe this happened as a result of a stack
==513==  overflow in your program's main thread (unlikely but
==513==  possible), you can try to increase the size of the
==513==  main thread stack using the --main-stacksize= flag.
==513==  The main thread stack size used in this run was 8388608.
==513== 
==513== HEAP SUMMARY:
==513==     in use at exit: 722 bytes in 7 blocks
==513==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==513== 
==513== LEAK SUMMARY:
==513==    definitely lost: 0 bytes in 0 blocks
==513==    indirectly lost: 0 bytes in 0 blocks
==513==      possibly lost: 0 bytes in 0 blocks
==513==    still reachable: 722 bytes in 7 blocks
==513==         suppressed: 0 bytes in 0 blocks
==513== Rerun with --leak-check=full to see details of leaked memory
==513== 
==513== For counts of detected and suppressed errors, rerun with: -v
==513== Use --track-origins=yes to see where uninitialised values come from
==513== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==518== Memcheck, a memory error detector
==518== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==518== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==518== Command: ./tester hands.txt draw.txt
==518== Parent PID: 517
==518== 
==518== Use of uninitialised value of size 8
==518==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x401BAF: main (test-input.c:69)
==518== 
==518== Invalid write of size 4
==518==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x401BAF: main (test-input.c:69)
==518==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==518== 
==518== 
==518== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==518==  Access not within mapped region at address 0x4
==518==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x401BAF: main (test-input.c:69)
==518==  If you believe this happened as a result of a stack
==518==  overflow in your program's main thread (unlikely but
==518==  possible), you can try to increase the size of the
==518==  main thread stack using the --main-stacksize= flag.
==518==  The main thread stack size used in this run was 8388608.
==518== 
==518== HEAP SUMMARY:
==518==     in use at exit: 722 bytes in 7 blocks
==518==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==518== 
==518== LEAK SUMMARY:
==518==    definitely lost: 0 bytes in 0 blocks
==518==    indirectly lost: 0 bytes in 0 blocks
==518==      possibly lost: 0 bytes in 0 blocks
==518==    still reachable: 722 bytes in 7 blocks
==518==         suppressed: 0 bytes in 0 blocks
==518== Rerun with --leak-check=full to see details of leaked memory
==518== 
==518== For counts of detected and suppressed errors, rerun with: -v
==518== Use --track-origins=yes to see where uninitialised values come from
==518== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==524== Memcheck, a memory error detector
==524== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==524== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==524== Command: ./tester h.txt d.txt
==524== Parent PID: 523
==524== 
==524== Use of uninitialised value of size 8
==524==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==524==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==524==    by 0x401BAF: main (test-input.c:69)
==524== 
==524== Invalid write of size 4
==524==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==524==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==524==    by 0x401BAF: main (test-input.c:69)
==524==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==524== 
==524== 
==524== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==524==  Access not within mapped region at address 0x4
==524==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==524==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==524==    by 0x401BAF: main (test-input.c:69)
==524==  If you believe this happened as a result of a stack
==524==  overflow in your program's main thread (unlikely but
==524==  possible), you can try to increase the size of the
==524==  main thread stack using the --main-stacksize= flag.
==524==  The main thread stack size used in this run was 8388608.
==524== 
==524== HEAP SUMMARY:
==524==     in use at exit: 722 bytes in 7 blocks
==524==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==524== 
==524== LEAK SUMMARY:
==524==    definitely lost: 0 bytes in 0 blocks
==524==    indirectly lost: 0 bytes in 0 blocks
==524==      possibly lost: 0 bytes in 0 blocks
==524==    still reachable: 722 bytes in 7 blocks
==524==         suppressed: 0 bytes in 0 blocks
==524== Rerun with --leak-check=full to see details of leaked memory
==524== 
==524== For counts of detected and suppressed errors, rerun with: -v
==524== Use --track-origins=yes to see where uninitialised values come from
==524== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==530== Memcheck, a memory error detector
==530== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==530== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==530== Command: ./tester i1 i2
==530== Parent PID: 529
==530== 
==530== Use of uninitialised value of size 8
==530==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==530==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==530==    by 0x401BAF: main (test-input.c:69)
==530== 
==530== Invalid write of size 4
==530==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==530==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==530==    by 0x401BAF: main (test-input.c:69)
==530==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==530== 
==530== 
==530== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==530==  Access not within mapped region at address 0x4
==530==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==530==    by 0x400D6A: read_input (in /graderhome/work/c4prj2_input/tester)
==530==    by 0x401BAF: main (test-input.c:69)
==530==  If you believe this happened as a result of a stack
==530==  overflow in your program's main thread (unlikely but
==530==  possible), you can try to increase the size of the
==530==  main thread stack using the --main-stacksize= flag.
==530==  The main thread stack size used in this run was 8388608.
==530== 
==530== HEAP SUMMARY:
==530==     in use at exit: 722 bytes in 7 blocks
==530==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==530== 
==530== LEAK SUMMARY:
==530==    definitely lost: 0 bytes in 0 blocks
==530==    indirectly lost: 0 bytes in 0 blocks
==530==      possibly lost: 0 bytes in 0 blocks
==530==    still reachable: 722 bytes in 7 blocks
==530==         suppressed: 0 bytes in 0 blocks
==530== Rerun with --leak-check=full to see details of leaked memory
==530== 
==530== For counts of detected and suppressed errors, rerun with: -v
==530== Use --track-origins=yes to see where uninitialised values come from
==530== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
