Grading at Wed Dec 25 05:44:38 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==681== Memcheck, a memory error detector
==681== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==681== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==681== Command: ./tester hands.txt draw.txt
==681== Parent PID: 680
==681== 
==681== Use of uninitialised value of size 8
==681==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==681==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==681==    by 0x401BBF: main (test-input.c:69)
==681== 
==681== Invalid write of size 4
==681==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==681==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==681==    by 0x401BBF: main (test-input.c:69)
==681==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==681== 
==681== 
==681== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==681==  Access not within mapped region at address 0x4
==681==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==681==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==681==    by 0x401BBF: main (test-input.c:69)
==681==  If you believe this happened as a result of a stack
==681==  overflow in your program's main thread (unlikely but
==681==  possible), you can try to increase the size of the
==681==  main thread stack using the --main-stacksize= flag.
==681==  The main thread stack size used in this run was 8388608.
==681== 
==681== HEAP SUMMARY:
==681==     in use at exit: 722 bytes in 7 blocks
==681==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==681== 
==681== LEAK SUMMARY:
==681==    definitely lost: 0 bytes in 0 blocks
==681==    indirectly lost: 0 bytes in 0 blocks
==681==      possibly lost: 0 bytes in 0 blocks
==681==    still reachable: 722 bytes in 7 blocks
==681==         suppressed: 0 bytes in 0 blocks
==681== Rerun with --leak-check=full to see details of leaked memory
==681== 
==681== For counts of detected and suppressed errors, rerun with: -v
==681== Use --track-origins=yes to see where uninitialised values come from
==681== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==686== Memcheck, a memory error detector
==686== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==686== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==686== Command: ./tester hands.txt draw.txt
==686== Parent PID: 685
==686== 
==686== Use of uninitialised value of size 8
==686==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==686==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==686==    by 0x401BBF: main (test-input.c:69)
==686== 
==686== Invalid write of size 4
==686==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==686==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==686==    by 0x401BBF: main (test-input.c:69)
==686==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==686== 
==686== 
==686== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==686==  Access not within mapped region at address 0x4
==686==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==686==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==686==    by 0x401BBF: main (test-input.c:69)
==686==  If you believe this happened as a result of a stack
==686==  overflow in your program's main thread (unlikely but
==686==  possible), you can try to increase the size of the
==686==  main thread stack using the --main-stacksize= flag.
==686==  The main thread stack size used in this run was 8388608.
==686== 
==686== HEAP SUMMARY:
==686==     in use at exit: 722 bytes in 7 blocks
==686==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==686== 
==686== LEAK SUMMARY:
==686==    definitely lost: 0 bytes in 0 blocks
==686==    indirectly lost: 0 bytes in 0 blocks
==686==      possibly lost: 0 bytes in 0 blocks
==686==    still reachable: 722 bytes in 7 blocks
==686==         suppressed: 0 bytes in 0 blocks
==686== Rerun with --leak-check=full to see details of leaked memory
==686== 
==686== For counts of detected and suppressed errors, rerun with: -v
==686== Use --track-origins=yes to see where uninitialised values come from
==686== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==692== Memcheck, a memory error detector
==692== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==692== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==692== Command: ./tester h.txt d.txt
==692== Parent PID: 691
==692== 
==692== Use of uninitialised value of size 8
==692==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==692==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==692==    by 0x401BBF: main (test-input.c:69)
==692== 
==692== Invalid write of size 4
==692==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==692==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==692==    by 0x401BBF: main (test-input.c:69)
==692==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==692== 
==692== 
==692== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==692==  Access not within mapped region at address 0x4
==692==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==692==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==692==    by 0x401BBF: main (test-input.c:69)
==692==  If you believe this happened as a result of a stack
==692==  overflow in your program's main thread (unlikely but
==692==  possible), you can try to increase the size of the
==692==  main thread stack using the --main-stacksize= flag.
==692==  The main thread stack size used in this run was 8388608.
==692== 
==692== HEAP SUMMARY:
==692==     in use at exit: 722 bytes in 7 blocks
==692==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==692== 
==692== LEAK SUMMARY:
==692==    definitely lost: 0 bytes in 0 blocks
==692==    indirectly lost: 0 bytes in 0 blocks
==692==      possibly lost: 0 bytes in 0 blocks
==692==    still reachable: 722 bytes in 7 blocks
==692==         suppressed: 0 bytes in 0 blocks
==692== Rerun with --leak-check=full to see details of leaked memory
==692== 
==692== For counts of detected and suppressed errors, rerun with: -v
==692== Use --track-origins=yes to see where uninitialised values come from
==692== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==698== Memcheck, a memory error detector
==698== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==698== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==698== Command: ./tester i1 i2
==698== Parent PID: 697
==698== 
==698== Use of uninitialised value of size 8
==698==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==698==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==698==    by 0x401BBF: main (test-input.c:69)
==698== 
==698== Invalid write of size 4
==698==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==698==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==698==    by 0x401BBF: main (test-input.c:69)
==698==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==698== 
==698== 
==698== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==698==  Access not within mapped region at address 0x4
==698==    at 0x400BFF: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==698==    by 0x400D7A: read_input (in /graderhome/work/c4prj2_input/tester)
==698==    by 0x401BBF: main (test-input.c:69)
==698==  If you believe this happened as a result of a stack
==698==  overflow in your program's main thread (unlikely but
==698==  possible), you can try to increase the size of the
==698==  main thread stack using the --main-stacksize= flag.
==698==  The main thread stack size used in this run was 8388608.
==698== 
==698== HEAP SUMMARY:
==698==     in use at exit: 722 bytes in 7 blocks
==698==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==698== 
==698== LEAK SUMMARY:
==698==    definitely lost: 0 bytes in 0 blocks
==698==    indirectly lost: 0 bytes in 0 blocks
==698==      possibly lost: 0 bytes in 0 blocks
==698==    still reachable: 722 bytes in 7 blocks
==698==         suppressed: 0 bytes in 0 blocks
==698== Rerun with --leak-check=full to see details of leaked memory
==698== 
==698== For counts of detected and suppressed errors, rerun with: -v
==698== Use --track-origins=yes to see where uninitialised values come from
==698== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
