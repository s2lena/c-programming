Grading at Wed Dec 25 04:34:15 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==351== Memcheck, a memory error detector
==351== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==351== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==351== Command: ./tester hands.txt draw.txt
==351== Parent PID: 350
==351== 
==351== Use of uninitialised value of size 8
==351==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x401B93: main (test-input.c:69)
==351== 
==351== Invalid write of size 4
==351==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x401B93: main (test-input.c:69)
==351==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==351== 
==351== 
==351== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==351==  Access not within mapped region at address 0x4
==351==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x401B93: main (test-input.c:69)
==351==  If you believe this happened as a result of a stack
==351==  overflow in your program's main thread (unlikely but
==351==  possible), you can try to increase the size of the
==351==  main thread stack using the --main-stacksize= flag.
==351==  The main thread stack size used in this run was 8388608.
==351== 
==351== HEAP SUMMARY:
==351==     in use at exit: 722 bytes in 7 blocks
==351==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==351== 
==351== LEAK SUMMARY:
==351==    definitely lost: 0 bytes in 0 blocks
==351==    indirectly lost: 0 bytes in 0 blocks
==351==      possibly lost: 0 bytes in 0 blocks
==351==    still reachable: 722 bytes in 7 blocks
==351==         suppressed: 0 bytes in 0 blocks
==351== Rerun with --leak-check=full to see details of leaked memory
==351== 
==351== For counts of detected and suppressed errors, rerun with: -v
==351== Use --track-origins=yes to see where uninitialised values come from
==351== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==356== Memcheck, a memory error detector
==356== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==356== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==356== Command: ./tester hands.txt draw.txt
==356== Parent PID: 355
==356== 
==356== Use of uninitialised value of size 8
==356==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==356==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==356==    by 0x401B93: main (test-input.c:69)
==356== 
==356== Invalid write of size 4
==356==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==356==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==356==    by 0x401B93: main (test-input.c:69)
==356==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==356== 
==356== 
==356== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==356==  Access not within mapped region at address 0x4
==356==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==356==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==356==    by 0x401B93: main (test-input.c:69)
==356==  If you believe this happened as a result of a stack
==356==  overflow in your program's main thread (unlikely but
==356==  possible), you can try to increase the size of the
==356==  main thread stack using the --main-stacksize= flag.
==356==  The main thread stack size used in this run was 8388608.
==356== 
==356== HEAP SUMMARY:
==356==     in use at exit: 722 bytes in 7 blocks
==356==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==356== 
==356== LEAK SUMMARY:
==356==    definitely lost: 0 bytes in 0 blocks
==356==    indirectly lost: 0 bytes in 0 blocks
==356==      possibly lost: 0 bytes in 0 blocks
==356==    still reachable: 722 bytes in 7 blocks
==356==         suppressed: 0 bytes in 0 blocks
==356== Rerun with --leak-check=full to see details of leaked memory
==356== 
==356== For counts of detected and suppressed errors, rerun with: -v
==356== Use --track-origins=yes to see where uninitialised values come from
==356== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==362== Memcheck, a memory error detector
==362== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==362== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==362== Command: ./tester h.txt d.txt
==362== Parent PID: 361
==362== 
==362== Use of uninitialised value of size 8
==362==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==362==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==362==    by 0x401B93: main (test-input.c:69)
==362== 
==362== Invalid write of size 4
==362==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==362==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==362==    by 0x401B93: main (test-input.c:69)
==362==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==362== 
==362== 
==362== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==362==  Access not within mapped region at address 0x4
==362==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==362==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==362==    by 0x401B93: main (test-input.c:69)
==362==  If you believe this happened as a result of a stack
==362==  overflow in your program's main thread (unlikely but
==362==  possible), you can try to increase the size of the
==362==  main thread stack using the --main-stacksize= flag.
==362==  The main thread stack size used in this run was 8388608.
==362== 
==362== HEAP SUMMARY:
==362==     in use at exit: 722 bytes in 7 blocks
==362==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==362== 
==362== LEAK SUMMARY:
==362==    definitely lost: 0 bytes in 0 blocks
==362==    indirectly lost: 0 bytes in 0 blocks
==362==      possibly lost: 0 bytes in 0 blocks
==362==    still reachable: 722 bytes in 7 blocks
==362==         suppressed: 0 bytes in 0 blocks
==362== Rerun with --leak-check=full to see details of leaked memory
==362== 
==362== For counts of detected and suppressed errors, rerun with: -v
==362== Use --track-origins=yes to see where uninitialised values come from
==362== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==368== Memcheck, a memory error detector
==368== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==368== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==368== Command: ./tester i1 i2
==368== Parent PID: 367
==368== 
==368== Use of uninitialised value of size 8
==368==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==368==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==368==    by 0x401B93: main (test-input.c:69)
==368== 
==368== Invalid write of size 4
==368==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==368==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==368==    by 0x401B93: main (test-input.c:69)
==368==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==368== 
==368== 
==368== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==368==  Access not within mapped region at address 0x4
==368==    at 0x400BE5: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==368==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==368==    by 0x401B93: main (test-input.c:69)
==368==  If you believe this happened as a result of a stack
==368==  overflow in your program's main thread (unlikely but
==368==  possible), you can try to increase the size of the
==368==  main thread stack using the --main-stacksize= flag.
==368==  The main thread stack size used in this run was 8388608.
==368== 
==368== HEAP SUMMARY:
==368==     in use at exit: 722 bytes in 7 blocks
==368==   total heap usage: 8 allocs, 1 frees, 4,818 bytes allocated
==368== 
==368== LEAK SUMMARY:
==368==    definitely lost: 0 bytes in 0 blocks
==368==    indirectly lost: 0 bytes in 0 blocks
==368==      possibly lost: 0 bytes in 0 blocks
==368==    still reachable: 722 bytes in 7 blocks
==368==         suppressed: 0 bytes in 0 blocks
==368== Rerun with --leak-check=full to see details of leaked memory
==368== 
==368== For counts of detected and suppressed errors, rerun with: -v
==368== Use --track-origins=yes to see where uninitialised values come from
==368== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
