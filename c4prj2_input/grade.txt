Grading at Wed Dec 25 14:54:06 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==2044== Memcheck, a memory error detector
==2044== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2044== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2044== Command: ./tester hands.txt draw.txt
==2044== Parent PID: 2043
==2044== 
==2044== Argument 'size' of function malloc has a fishy (possibly negative) value: -752
==2044==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2044==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2044==    by 0x400E1D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2044==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2044==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2044==    by 0x401C29: main (test-input.c:69)
==2044== 
==2044== Invalid write of size 8
==2044==    at 0x400E44: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2044==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2044==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2044==    by 0x401C29: main (test-input.c:69)
==2044==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2044== 
==2044== 
==2044== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2044==  Access not within mapped region at address 0x8
==2044==    at 0x400E44: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2044==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2044==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2044==    by 0x401C29: main (test-input.c:69)
==2044==  If you believe this happened as a result of a stack
==2044==  overflow in your program's main thread (unlikely but
==2044==  possible), you can try to increase the size of the
==2044==  main thread stack using the --main-stacksize= flag.
==2044==  The main thread stack size used in this run was 8388608.
==2044== 
==2044== HEAP SUMMARY:
==2044==     in use at exit: 730 bytes in 8 blocks
==2044==   total heap usage: 10 allocs, 2 frees, 4,834 bytes allocated
==2044== 
==2044== LEAK SUMMARY:
==2044==    definitely lost: 0 bytes in 0 blocks
==2044==    indirectly lost: 0 bytes in 0 blocks
==2044==      possibly lost: 0 bytes in 0 blocks
==2044==    still reachable: 730 bytes in 8 blocks
==2044==         suppressed: 0 bytes in 0 blocks
==2044== Rerun with --leak-check=full to see details of leaked memory
==2044== 
==2044== For counts of detected and suppressed errors, rerun with: -v
==2044== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==2049== Memcheck, a memory error detector
==2049== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2049== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2049== Command: ./tester hands.txt draw.txt
==2049== Parent PID: 2048
==2049== 
==2049== Argument 'size' of function malloc has a fishy (possibly negative) value: -752
==2049==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2049==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2049==    by 0x400E1D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2049==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2049==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2049==    by 0x401C29: main (test-input.c:69)
==2049== 
==2049== Invalid write of size 8
==2049==    at 0x400E44: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2049==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2049==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2049==    by 0x401C29: main (test-input.c:69)
==2049==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2049== 
==2049== 
==2049== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2049==  Access not within mapped region at address 0x8
==2049==    at 0x400E44: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2049==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2049==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2049==    by 0x401C29: main (test-input.c:69)
==2049==  If you believe this happened as a result of a stack
==2049==  overflow in your program's main thread (unlikely but
==2049==  possible), you can try to increase the size of the
==2049==  main thread stack using the --main-stacksize= flag.
==2049==  The main thread stack size used in this run was 8388608.
==2049== 
==2049== HEAP SUMMARY:
==2049==     in use at exit: 730 bytes in 8 blocks
==2049==   total heap usage: 10 allocs, 2 frees, 4,834 bytes allocated
==2049== 
==2049== LEAK SUMMARY:
==2049==    definitely lost: 0 bytes in 0 blocks
==2049==    indirectly lost: 0 bytes in 0 blocks
==2049==      possibly lost: 0 bytes in 0 blocks
==2049==    still reachable: 730 bytes in 8 blocks
==2049==         suppressed: 0 bytes in 0 blocks
==2049== Rerun with --leak-check=full to see details of leaked memory
==2049== 
==2049== For counts of detected and suppressed errors, rerun with: -v
==2049== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==2055== Memcheck, a memory error detector
==2055== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2055== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2055== Command: ./tester h.txt d.txt
==2055== Parent PID: 2054
==2055== 
==2055== Argument 'size' of function malloc has a fishy (possibly negative) value: -752
==2055==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2055==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2055==    by 0x400E1D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2055==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2055==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2055==    by 0x401C29: main (test-input.c:69)
==2055== 
==2055== Invalid write of size 8
==2055==    at 0x400E44: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2055==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2055==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2055==    by 0x401C29: main (test-input.c:69)
==2055==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2055== 
==2055== 
==2055== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2055==  Access not within mapped region at address 0x8
==2055==    at 0x400E44: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2055==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2055==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2055==    by 0x401C29: main (test-input.c:69)
==2055==  If you believe this happened as a result of a stack
==2055==  overflow in your program's main thread (unlikely but
==2055==  possible), you can try to increase the size of the
==2055==  main thread stack using the --main-stacksize= flag.
==2055==  The main thread stack size used in this run was 8388608.
==2055== 
==2055== HEAP SUMMARY:
==2055==     in use at exit: 730 bytes in 8 blocks
==2055==   total heap usage: 10 allocs, 2 frees, 4,834 bytes allocated
==2055== 
==2055== LEAK SUMMARY:
==2055==    definitely lost: 0 bytes in 0 blocks
==2055==    indirectly lost: 0 bytes in 0 blocks
==2055==      possibly lost: 0 bytes in 0 blocks
==2055==    still reachable: 730 bytes in 8 blocks
==2055==         suppressed: 0 bytes in 0 blocks
==2055== Rerun with --leak-check=full to see details of leaked memory
==2055== 
==2055== For counts of detected and suppressed errors, rerun with: -v
==2055== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==2061== Memcheck, a memory error detector
==2061== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2061== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2061== Command: ./tester i1 i2
==2061== Parent PID: 2060
==2061== 
==2061== Argument 'size' of function malloc has a fishy (possibly negative) value: -752
==2061==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2061==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2061==    by 0x400E1D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2061==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2061==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2061==    by 0x401C29: main (test-input.c:69)
==2061== 
==2061== Invalid write of size 8
==2061==    at 0x400E44: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2061==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2061==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2061==    by 0x401C29: main (test-input.c:69)
==2061==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2061== 
==2061== 
==2061== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2061==  Access not within mapped region at address 0x8
==2061==    at 0x400E44: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2061==    by 0x400C0F: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2061==    by 0x400D4E: read_input (in /graderhome/work/c4prj2_input/tester)
==2061==    by 0x401C29: main (test-input.c:69)
==2061==  If you believe this happened as a result of a stack
==2061==  overflow in your program's main thread (unlikely but
==2061==  possible), you can try to increase the size of the
==2061==  main thread stack using the --main-stacksize= flag.
==2061==  The main thread stack size used in this run was 8388608.
==2061== 
==2061== HEAP SUMMARY:
==2061==     in use at exit: 730 bytes in 8 blocks
==2061==   total heap usage: 10 allocs, 2 frees, 4,834 bytes allocated
==2061== 
==2061== LEAK SUMMARY:
==2061==    definitely lost: 0 bytes in 0 blocks
==2061==    indirectly lost: 0 bytes in 0 blocks
==2061==      possibly lost: 0 bytes in 0 blocks
==2061==    still reachable: 730 bytes in 8 blocks
==2061==         suppressed: 0 bytes in 0 blocks
==2061== Rerun with --leak-check=full to see details of leaked memory
==2061== 
==2061== For counts of detected and suppressed errors, rerun with: -v
==2061== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
