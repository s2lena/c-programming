Grading at Thu Dec 26 09:32:49 UTC 2019
Running 'make clean' to do a clean build of your project
rm -rf *.o poker *~
Running 'make poker OTHERFLAGS=-O3' to build your project
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o cards.o cards.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o deck.o deck.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o eval.o eval.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o future.o future.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o input.o input.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o main.o main.c
gcc -o poker -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 cards.o deck.o eval.o future.o input.o main.o
 - Starting with some Texas Hold'em hands
Running a simulation with 20000 draws for 2 hands...
Valgrind reported errors:
==163== Memcheck, a memory error detector
==163== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==163== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==163== Command: ./poker inp.txt 20000
==163== Parent PID: 162
==163== 
==163== Invalid write of size 8
==163==    at 0x40341D: read_input (input.c:59)
==163==    by 0x400A19: main (main.c:25)
==163==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==163== 
==163== 
==163== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==163==  Access not within mapped region at address 0x0
==163==    at 0x40341D: read_input (input.c:59)
==163==    by 0x400A19: main (main.c:25)
==163==  If you believe this happened as a result of a stack
==163==  overflow in your program's main thread (unlikely but
==163==  possible), you can try to increase the size of the
==163==  main thread stack using the --main-stacksize= flag.
==163==  The main thread stack size used in this run was 8388608.
==163== 
==163== HEAP SUMMARY:
==163==     in use at exit: 1,032 bytes in 29 blocks
==163==   total heap usage: 57 allocs, 28 frees, 10,136 bytes allocated
==163== 
==163== LEAK SUMMARY:
==163==    definitely lost: 32 bytes in 2 blocks
==163==    indirectly lost: 0 bytes in 0 blocks
==163==      possibly lost: 0 bytes in 0 blocks
==163==    still reachable: 1,000 bytes in 27 blocks
==163==         suppressed: 0 bytes in 0 blocks
==163== Rerun with --leak-check=full to see details of leaked memory
==163== 
==163== For counts of detected and suppressed errors, rerun with: -v
==163== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==168== Memcheck, a memory error detector
==168== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==168== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==168== Command: ./poker inp.txt 25000
==168== Parent PID: 167
==168== 
==168== Invalid write of size 8
==168==    at 0x40341D: read_input (input.c:59)
==168==    by 0x400A19: main (main.c:25)
==168==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==168== 
==168== 
==168== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==168==  Access not within mapped region at address 0x0
==168==    at 0x40341D: read_input (input.c:59)
==168==    by 0x400A19: main (main.c:25)
==168==  If you believe this happened as a result of a stack
==168==  overflow in your program's main thread (unlikely but
==168==  possible), you can try to increase the size of the
==168==  main thread stack using the --main-stacksize= flag.
==168==  The main thread stack size used in this run was 8388608.
==168== 
==168== HEAP SUMMARY:
==168==     in use at exit: 1,224 bytes in 39 blocks
==168==   total heap usage: 80 allocs, 41 frees, 10,712 bytes allocated
==168== 
==168== LEAK SUMMARY:
==168==    definitely lost: 48 bytes in 3 blocks
==168==    indirectly lost: 0 bytes in 0 blocks
==168==      possibly lost: 0 bytes in 0 blocks
==168==    still reachable: 1,176 bytes in 36 blocks
==168==         suppressed: 0 bytes in 0 blocks
==168== Rerun with --leak-check=full to see details of leaked memory
==168== 
==168== For counts of detected and suppressed errors, rerun with: -v
==168== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==173== Memcheck, a memory error detector
==173== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==173== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==173== Command: ./poker inp2.txt 25000
==173== Parent PID: 172
==173== 
==173== Invalid write of size 8
==173==    at 0x40341D: read_input (input.c:59)
==173==    by 0x400A19: main (main.c:25)
==173==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==173== 
==173== 
==173== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==173==  Access not within mapped region at address 0x0
==173==    at 0x40341D: read_input (input.c:59)
==173==    by 0x400A19: main (main.c:25)
==173==  If you believe this happened as a result of a stack
==173==  overflow in your program's main thread (unlikely but
==173==  possible), you can try to increase the size of the
==173==  main thread stack using the --main-stacksize= flag.
==173==  The main thread stack size used in this run was 8388608.
==173== 
==173== HEAP SUMMARY:
==173==     in use at exit: 1,224 bytes in 39 blocks
==173==   total heap usage: 80 allocs, 41 frees, 10,712 bytes allocated
==173== 
==173== LEAK SUMMARY:
==173==    definitely lost: 48 bytes in 3 blocks
==173==    indirectly lost: 0 bytes in 0 blocks
==173==      possibly lost: 0 bytes in 0 blocks
==173==    still reachable: 1,176 bytes in 36 blocks
==173==         suppressed: 0 bytes in 0 blocks
==173== Rerun with --leak-check=full to see details of leaked memory
==173== 
==173== For counts of detected and suppressed errors, rerun with: -v
==173== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 2 hands...
Valgrind reported errors:
==178== Memcheck, a memory error detector
==178== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==178== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==178== Command: ./poker inp2.txt 25000
==178== Parent PID: 177
==178== 
==178== Invalid write of size 8
==178==    at 0x40341D: read_input (input.c:59)
==178==    by 0x400A19: main (main.c:25)
==178==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==178== 
==178== 
==178== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==178==  Access not within mapped region at address 0x0
==178==    at 0x40341D: read_input (input.c:59)
==178==    by 0x400A19: main (main.c:25)
==178==  If you believe this happened as a result of a stack
==178==  overflow in your program's main thread (unlikely but
==178==  possible), you can try to increase the size of the
==178==  main thread stack using the --main-stacksize= flag.
==178==  The main thread stack size used in this run was 8388608.
==178== 
==178== HEAP SUMMARY:
==178==     in use at exit: 1,032 bytes in 29 blocks
==178==   total heap usage: 57 allocs, 28 frees, 10,136 bytes allocated
==178== 
==178== LEAK SUMMARY:
==178==    definitely lost: 32 bytes in 2 blocks
==178==    indirectly lost: 0 bytes in 0 blocks
==178==      possibly lost: 0 bytes in 0 blocks
==178==    still reachable: 1,000 bytes in 27 blocks
==178==         suppressed: 0 bytes in 0 blocks
==178== Rerun with --leak-check=full to see details of leaked memory
==178== 
==178== For counts of detected and suppressed errors, rerun with: -v
==178== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 80000 draws for 4 hands...
Valgrind reported errors:
==183== Memcheck, a memory error detector
==183== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==183== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==183== Command: ./poker inp3.txt 80000
==183== Parent PID: 182
==183== 
==183== Invalid write of size 8
==183==    at 0x40341D: read_input (input.c:59)
==183==    by 0x400A19: main (main.c:25)
==183==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==183== 
==183== 
==183== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==183==  Access not within mapped region at address 0x0
==183==    at 0x40341D: read_input (input.c:59)
==183==    by 0x400A19: main (main.c:25)
==183==  If you believe this happened as a result of a stack
==183==  overflow in your program's main thread (unlikely but
==183==  possible), you can try to increase the size of the
==183==  main thread stack using the --main-stacksize= flag.
==183==  The main thread stack size used in this run was 8388608.
==183== 
==183== HEAP SUMMARY:
==183==     in use at exit: 1,272 bytes in 46 blocks
==183==   total heap usage: 88 allocs, 42 frees, 10,904 bytes allocated
==183== 
==183== LEAK SUMMARY:
==183==    definitely lost: 64 bytes in 4 blocks
==183==    indirectly lost: 0 bytes in 0 blocks
==183==      possibly lost: 0 bytes in 0 blocks
==183==    still reachable: 1,208 bytes in 42 blocks
==183==         suppressed: 0 bytes in 0 blocks
==183== Rerun with --leak-check=full to see details of leaked memory
==183== 
==183== For counts of detected and suppressed errors, rerun with: -v
==183== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==188== Memcheck, a memory error detector
==188== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==188== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==188== Command: ./poker inp.txt 30000
==188== Parent PID: 187
==188== 
==188== Invalid write of size 8
==188==    at 0x40341D: read_input (input.c:59)
==188==    by 0x400A19: main (main.c:25)
==188==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==188== 
==188== 
==188== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==188==  Access not within mapped region at address 0x0
==188==    at 0x40341D: read_input (input.c:59)
==188==    by 0x400A19: main (main.c:25)
==188==  If you believe this happened as a result of a stack
==188==  overflow in your program's main thread (unlikely but
==188==  possible), you can try to increase the size of the
==188==  main thread stack using the --main-stacksize= flag.
==188==  The main thread stack size used in this run was 8388608.
==188== 
==188== HEAP SUMMARY:
==188==     in use at exit: 936 bytes in 26 blocks
==188==   total heap usage: 48 allocs, 22 frees, 9,872 bytes allocated
==188== 
==188== LEAK SUMMARY:
==188==    definitely lost: 32 bytes in 2 blocks
==188==    indirectly lost: 0 bytes in 0 blocks
==188==      possibly lost: 0 bytes in 0 blocks
==188==    still reachable: 904 bytes in 24 blocks
==188==         suppressed: 0 bytes in 0 blocks
==188== Rerun with --leak-check=full to see details of leaked memory
==188== 
==188== For counts of detected and suppressed errors, rerun with: -v
==188== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
 - Next, few Seven Card Stud hands
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==193== Memcheck, a memory error detector
==193== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==193== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==193== Command: ./poker inp.txt 30000
==193== Parent PID: 192
==193== 
==193== Invalid write of size 8
==193==    at 0x40341D: read_input (input.c:59)
==193==    by 0x400A19: main (main.c:25)
==193==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==193== 
==193== 
==193== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==193==  Access not within mapped region at address 0x0
==193==    at 0x40341D: read_input (input.c:59)
==193==    by 0x400A19: main (main.c:25)
==193==  If you believe this happened as a result of a stack
==193==  overflow in your program's main thread (unlikely but
==193==  possible), you can try to increase the size of the
==193==  main thread stack using the --main-stacksize= flag.
==193==  The main thread stack size used in this run was 8388608.
==193== 
==193== HEAP SUMMARY:
==193==     in use at exit: 1,064 bytes in 32 blocks
==193==   total heap usage: 58 allocs, 26 frees, 10,416 bytes allocated
==193== 
==193== LEAK SUMMARY:
==193==    definitely lost: 32 bytes in 2 blocks
==193==    indirectly lost: 0 bytes in 0 blocks
==193==      possibly lost: 0 bytes in 0 blocks
==193==    still reachable: 1,032 bytes in 30 blocks
==193==         suppressed: 0 bytes in 0 blocks
==193== Rerun with --leak-check=full to see details of leaked memory
==193== 
==193== For counts of detected and suppressed errors, rerun with: -v
==193== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Running a simulation with 40000 draws for 3 hands...
Valgrind reported errors:
==198== Memcheck, a memory error detector
==198== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==198== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==198== Command: ./poker inp2.txt 40000
==198== Parent PID: 197
==198== 
==198== Invalid write of size 8
==198==    at 0x40341D: read_input (input.c:59)
==198==    by 0x400A19: main (main.c:25)
==198==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==198== 
==198== 
==198== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==198==  Access not within mapped region at address 0x0
==198==    at 0x40341D: read_input (input.c:59)
==198==    by 0x400A19: main (main.c:25)
==198==  If you believe this happened as a result of a stack
==198==  overflow in your program's main thread (unlikely but
==198==  possible), you can try to increase the size of the
==198==  main thread stack using the --main-stacksize= flag.
==198==  The main thread stack size used in this run was 8388608.
==198== 
==198== HEAP SUMMARY:
==198==     in use at exit: 1,240 bytes in 43 blocks
==198==   total heap usage: 78 allocs, 35 frees, 11,024 bytes allocated
==198== 
==198== LEAK SUMMARY:
==198==    definitely lost: 48 bytes in 3 blocks
==198==    indirectly lost: 0 bytes in 0 blocks
==198==      possibly lost: 0 bytes in 0 blocks
==198==    still reachable: 1,192 bytes in 40 blocks
==198==         suppressed: 0 bytes in 0 blocks
==198== Rerun with --leak-check=full to see details of leaked memory
==198== 
==198== For counts of detected and suppressed errors, rerun with: -v
==198== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
 - Then one from a completely made up poker variant
Running a simulation with 100000 draws for 6 hands...
Valgrind reported errors:
==203== Memcheck, a memory error detector
==203== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==203== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==203== Command: ./poker whacky.txt 100000
==203== Parent PID: 202
==203== 
==203== Invalid write of size 8
==203==    at 0x40341D: read_input (input.c:59)
==203==    by 0x400A19: main (main.c:25)
==203==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==203== 
==203== 
==203== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==203==  Access not within mapped region at address 0x0
==203==    at 0x40341D: read_input (input.c:59)
==203==    by 0x400A19: main (main.c:25)
==203==  If you believe this happened as a result of a stack
==203==  overflow in your program's main thread (unlikely but
==203==  possible), you can try to increase the size of the
==203==  main thread stack using the --main-stacksize= flag.
==203==  The main thread stack size used in this run was 8388608.
==203== 
==203== HEAP SUMMARY:
==203==     in use at exit: 1,720 bytes in 70 blocks
==203==   total heap usage: 138 allocs, 68 frees, 12,272 bytes allocated
==203== 
==203== LEAK SUMMARY:
==203==    definitely lost: 96 bytes in 6 blocks
==203==    indirectly lost: 0 bytes in 0 blocks
==203==      possibly lost: 0 bytes in 0 blocks
==203==    still reachable: 1,624 bytes in 64 blocks
==203==         suppressed: 0 bytes in 0 blocks
==203== Rerun with --leak-check=full to see details of leaked memory
==203== 
==203== For counts of detected and suppressed errors, rerun with: -v
==203== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
